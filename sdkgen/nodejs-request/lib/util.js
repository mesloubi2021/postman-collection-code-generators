const { convert } = require('postman-code-generators');

/**
 * sanitizes input string by handling escape characters eg: converts '''' to '\'\''
 *
 * @param {String} inputString
 * @returns {String}
 */
function sanitize (inputString) {
  if (typeof inputString !== 'string') {
    return '';
  }
  return inputString.replace(/\\/g, '\\\\').replace(/'/g, '\\\'').replace(/\n/g, '\\n');
}

/**
 * Replaces postman variables( {{variable}} ) in the generated snippet as
 * `' + variable_name + '`
 *
 * @param {String} requestSnippet - Request snipept generated by postman-code-generator
 * @returns {String} - Request snippet string with replaced collection variables
 */
function replaceVariables (requestSnippet) {
  var variableDeclarations = requestSnippet.match(/{{[^{\s\n}]*}}/g);
  if (variableDeclarations !== null) {
    variableDeclarations.forEach((element) => {
      // replacing {{variable_name}} with ' + variable_name + '
      requestSnippet = requestSnippet.replace(element, '\' + ' + element.substring(2, element.length - 2) + ' + \'');
    });
  }
  return requestSnippet;
}

/**
 * Generates snippet for a function declaration

 * @param {sdk.Item} collectionItem - PostmanItem Instance
 * @param {Object} options - postman-code-gen options (for specific language)
 * @returns {String} - returns a snippet of function declaration of of a request
 */
function generateFunctionSnippet (collectionItem, options) {
  return new Promise((resolve, reject) => {
    let snippet = '',
      variableDeclarations,
      request = collectionItem.request;

    convert('NodeJs', 'Request', request, {
      SDKGEN_enabled: true,
      ...options
    }, function (error, requestSnippet) {
      if (error) {
        return reject(error);
      }

      variableDeclarations = requestSnippet.match(/{{[^{\s\n}]*}}/g);

      // JSDocs declaration
      snippet += `/**\n${request.description}\n`;
      variableDeclarations.forEach((element) => {
        let varName = element.substring(2, element.length - 2);
        snippet += `@param {String} variables.${varName}\n`;
      });
      snippet += '@param {Function} callback - Callback function to return response (err, res)\n';
      snippet += '*/\n';

      snippet += options.ES6_enabled ? '(variables, callback) => {\n' : 'function(variables, callback){\n';
      snippet += 'if (typeof variables === \'function\') {\n';
      snippet += 'callback = variables;\n';
      snippet += 'variables = {};\n';
      snippet += '}\n';

      // Request level variable declaration
      variableDeclarations.forEach((element) => {
        let varName = element.substring(2, element.length - 2);
        snippet += options.ES6_enabled ? 'let ' : 'var ';
        snippet += `${varName} = variables.${varName} ? variables.${varName} : self.variables.${varName};\n`;
      });
  
      // replaceVariable replaces all the postman variables and returns the resulting snippet
      snippet += replaceVariables(requestSnippet);
      snippet += '}';
      return resolve(snippet);
    });
  });
}

/**
 * A handler function used to generate snippet for a pm.Item
 *
 * @param {sdk.Item} collectionItem - Postman Collection Item instance
 * @param {object} options - postman-code-generator options
 * @returns {string} - string contaning snippet for input item
 */
async function itemHandler (collectionItem, options) {
  let snippet = '';
  try {
    snippet += `"${collectionItem.name}": \n`;
    snippet += await generateFunctionSnippet(collectionItem, options);
    snippet += ',\n';
  }
  catch (error) {
    throw error;
  }
  return snippet;
}

/**
 * Handler function userd to generate snippet for a pm.ItemGroup
 *
 * @param {sdk.ItemGroup} collectionItem - Postman Collection Item Member
 * @param {array } memberResults - Array of result after passing through processCollection method for this ItemGroup
 * @returns {string} - snippet for input ItemGroup
 */
function itemGroupHandler (collectionItem, memberResults) {
  let snippet = '';
  snippet += `/**\n${collectionItem.description}\n*/\n`;
  snippet += `"${collectionItem.name}": {\n`;
  snippet += memberResults.join('');
  snippet += '},\n';
  return snippet;
}

module.exports = {
  sanitize,
  generateFunctionSnippet,
  itemHandler,
  itemGroupHandler
};
