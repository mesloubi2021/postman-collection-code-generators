// TODO research on why branch dep were missing index file contents
// ? ask umesh about the same
const codegen = require('postman-code-generators'),
    _ = require('lodash'),
    sdk = require('postman-collection');

/**
 * Fetches section of snippet from snippet generated by postman-code-generators
 * IMPORTS: library imports
 * CONFIG: http request config
 * REQUEST: http request call

 * @param {String} snippet - Request snippet generated by postman-code-generators
 * @param {String} section - Section of snippet to be fetched. Possible values -> (IMPORTS/CONFIG/REQUEST)
 */
function fetchSnippet (snippet, section) {
    var saperator, re;
    switch (section) {
        case 'IMPORTS':
            saperator = '// ---> IMPORTS <---';
            break;
        case 'CONFIG':
            saperator = '// ---> CONFIG <---';
            break;
        case 'REQUEST':
            saperator = '// ---> REQUEST <---';
            break;
        default:
            saperator = '';
            break;
    }
    // eslint-disable-next-line security/detect-non-literal-regexp
    re = new RegExp(`(?<=${saperator})(.*)(?=${saperator})`, 'g');
    return snippet.match(re);
}

/**
 * Generates snippet for a function declaration

 * @param {String} requestSnippet - Request snippet generated by postman-code-generator
 * @param {Object} options - postman-code-gen options (for specific language)
 */
function generateFunctionSnippet (requestSnippet, options) {
    var snippet = '';
    snippet += options.ES6_enabled ? '(callback) => {\n' : 'function(callback){\n';
    snippet += snippet;
    snippet += '}';
    return snippet;
}

/**
 * Extracts requests and generats snipepts collection members

 * @param {Object} collectionItemMember - PostmanItem or PostmanItemGroup instance
 * @param {Object} options - postman-code-gen options (for specific language)
 * @param {Object} callback - Callback function to return result
 * TODO filterout and test this function throughly
 */
function processCollection (collectionItemMember, options, callback) {
    var snippet = '';
    if (sdk.Item.isItem(collectionItemMember)) {
        codegen.convert('NodeJs', 'Request', collectionItemMember.request, options, function (err, requestSnippet) {
            if (err) {
                return callback(err, null);
            }
            snippet += `"${collectionItemMember.name}": `;
            snippet += generateFunctionSnippet(
                `${fetchSnippet(requestSnippet, 'CONFIG')}\n
                ${fetchSnippet(requestSnippet, 'REQUEST')}`,
                options);
            snippet += ',\n';
        });
        return callback(null, snippet);
    }
    snippet = `"${collectionItemMember.name}": {\n`;
    collectionItemMember.items.members.forEach((element) => {
        processCollection(element, options, function (err, itemSnippet) {
            if (err) {
                return callback(err, null);
            }
            snippet += itemSnippet;
        });
    });
    snippet += '},\n';
    return callback(null, snippet);
}

module.exports = {
    fetchSnippet,
    generateFunctionSnippet,
    processCollection
};
